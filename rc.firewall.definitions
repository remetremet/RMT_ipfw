#!/bin/sh

fwcmd="/sbin/ipfw"

# definitions
IPFW_unprivports="1024-65535"
IPFW_privports="1-1023"
IPFW_logamount="logamount 0"
IPFW_deny="deny"
IPFW_denylog="deny log ${IPFW_logamount}"
IPFW_allow="allow"
IPFW_allowlog="allow log ${IPFW_logamount}"
IPFW_keep="keep-state"
IPFW_keepsetup="keep-state setup"

# defauls (to be overriden in config)
IPFW_statefull="0"
IPFW_multiwan="0"

###########################
# Global (mandatory) tables
###########################
${fwcmd} -q table LOCALHOST create > /dev/null 2> /dev/null
${fwcmd} -q table LOCALHOST flush > /dev/null 2> /dev/null
${fwcmd} -q table LOCALHOST add 127.0.0.1/32 0
${fwcmd} -q table LOCALHOST6 create > /dev/null 2> /dev/null
${fwcmd} -q table LOCALHOST6 flush > /dev/null 2> /dev/null
${fwcmd} -q table LOCALHOST6 add ::1/128 0
###
${fwcmd} -q table PRIVATE create > /dev/null 2> /dev/null
${fwcmd} -q table PRIVATE flush > /dev/null 2> /dev/null
${fwcmd} -q table PRIVATE add 192.168.0.0/16 0
${fwcmd} -q table PRIVATE add 10.0.0.0/8 0
${fwcmd} -q table PRIVATE add 172.16.0.0/12 0
###
${fwcmd} -q table BLOCKED_RANGES create > /dev/null 2> /dev/null
${fwcmd} -q table BLOCKED_RANGES flush > /dev/null 2> /dev/null
${fwcmd} -q table BLOCKED_RANGES add 0.0.0.0/8
${fwcmd} -q table BLOCKED_RANGES add 100.64.0.0/10   # Shared
${fwcmd} -q table BLOCKED_RANGES add 169.254.0.0/16  # APIPA
${fwcmd} -q table BLOCKED_RANGES add 192.0.0.0/24    # IANA IPv4
${fwcmd} -q table BLOCKED_RANGES add 192.0.2.0/24    # TEST-NET-1
${fwcmd} -q table BLOCKED_RANGES add 192.88.99.0/24  # 6-to-4
${fwcmd} -q table BLOCKED_RANGES add 198.18.0.0/15   # Benchmark
${fwcmd} -q table BLOCKED_RANGES add 198.51.100.0/24 # TEST-NET-2
${fwcmd} -q table BLOCKED_RANGES add 203.0.113.0/24  # TEST-NET-3
${fwcmd} -q table BLOCKED_RANGES add 224.0.0.0/24
${fwcmd} -q table BLOCKED_RANGES add 240.0.0.0/4
###
if [ x"$ipv6_available" == x"0" ]; then
 ${fwcmd} -q table BLOCKED_RANGES6 create > /dev/null 2> /dev/null
 ${fwcmd} -q table BLOCKED_RANGES6 flush > /dev/null 2> /dev/null
 ${fwcmd} -q table BLOCKED_RANGES6 add 2001:0:ac10::/44
 ${fwcmd} -q table BLOCKED_RANGES6 add 2001::/40
 ${fwcmd} -q table BLOCKED_RANGES6 add 2001:0:a9fe::/48
 ${fwcmd} -q table BLOCKED_RANGES6 add 2001:0:c000:200::/56
 ${fwcmd} -q table BLOCKED_RANGES6 add 2001:0:e000::/56
 ${fwcmd} -q table BLOCKED_RANGES6 add 2001:0:f000::/36
fi
###
${fwcmd} -q table LOCAL_RANGES create > /dev/null 2> /dev/null
${fwcmd} -q table LOCAL_RANGES flush > /dev/null 2> /dev/null
###
if [ x"$ipv6_available" == x"0" ]; then
 ${fwcmd} -q table LOCAL_RANGES6 create > /dev/null 2> /dev/null
 ${fwcmd} -q table LOCAL_RANGES6 flush > /dev/null 2> /dev/null
fi
###
${fwcmd} -q table OUT_RANGES create > /dev/null 2> /dev/null
${fwcmd} -q table OUT_RANGES flush > /dev/null 2> /dev/null
###
if [ x"$ipv6_available" == x"0" ]; then
 ${fwcmd} -q table OUT_RANGES6 create > /dev/null 2> /dev/null
 ${fwcmd} -q table OUT_RANGES6 flush > /dev/null 2> /dev/null
fi
###
${fwcmd} -q table TRUSTED create > /dev/null 2> /dev/null
${fwcmd} -q table TRUSTED flush > /dev/null 2> /dev/null
###
${fwcmd} -q table TRUSTED6 create > /dev/null 2> /dev/null
${fwcmd} -q table TRUSTED6 flush > /dev/null 2> /dev/null
###

IPFW_known_ports=""
IPFW_known_ports="${IPFW_known_ports} 20 21 22 23 25 53 67 68 69 80 81 88 110 111 113 123 135 137 138 139 143 161"
IPFW_known_ports="${IPFW_known_ports} 443 445 465 521 546 547 554 587 777 853 873 953 990 993 995"
IPFW_known_ports="${IPFW_known_ports} 1080 1194 1433 1434 1723 1883 1900 3306 3307 3333 3389 3478 4021 4025"
IPFW_known_ports="${IPFW_known_ports} 5000 5001 5004 5060 5061 5201 5190 5222 5223 5228 5432 5514 5672 5673 5678 5900 5901 6789 7275 7276 7777"
IPFW_known_ports="${IPFW_known_ports} 8000 8080 8081 8086 8090 8181 8291 8292 8443 8843 8880 8883 8888 9000 9090 9100 9443"
IPFW_known_ports="${IPFW_known_ports} 10001 10050 10051 10052 15672"
IPFW_known_ports="${IPFW_known_ports} 33322 33434 40126-40128 41195 48822 50870"

BLOCK_TABLESRC=""
BLOCK_TABLESRC_6=""
BLOCK_TABLEDST=""
BLOCK_TABLEDST_6=""

###########################
# Functions
###########################
# block_ports <type> <port_list>
# type = "in4","in6","in4l","in6l","out4","out6","out4l","out6l"
block_dstports (){
 local cmd=""
 local cmd2=""
 local ports=""
 case $1 in
 in4)
        cmd="${fwcmd} add ${IPFW_deny} ip4 from any to any"
 ;;
 in6)
        cmd="${fwcmd} add ${IPFW_deny} ip6 from any to any"
 ;;
 in4log)
        cmd="${fwcmd} add ${IPFW_denylog} ip4 from any to any"
 ;;
 in6log)
        cmd="${fwcmd} add ${IPFW_denylog} ip6 from any to any"
 ;;
 out4)
        cmd="${fwcmd} add ${IPFW_deny} ip4 from any to any"
 ;;
 out6)
        cmd="${fwcmd} add ${IPFW_deny} ip6 from any to any"
 ;;
 out4log)
        cmd="${fwcmd} add ${IPFW_denylog} ip4 from any to any"
 ;;
 out6log)
        cmd="${fwcmd} add ${IPFW_denylog} ip6 from any to any"
 ;;
 *)
        echo "Unknown block_ports type."
 ;;
 esac
 if [ -n "${cmd}" ]; then
  for ports in $(array_groupby "$2" "16"); do
   if [ -n "${ports}" ]; then
    ${cmd} ${ports}
    if [ -n "${cmd2}" ]; then
     ${cmd2} ${ports} to any
    fi
   fi
  done
 fi
}


# block_srchost <host_table>
block_srchost (){
 local host="table(${1})"
 ${fwcmd} add ${IPFW_denylog} all from ${host} to any not 53,123
}


# block_dsthost <host_table>
block_dsthost (){
 local host="table(${1})"
 ${fwcmd} add ${IPFW_deny} all from any to ${host}
}


# port_allow <tcp/udp> <in/out> <ports>
port_allow (){
 local ports=""
 for ports in $(array_groupby "$3" "16"); do
  if [ -n "${ports}" ]; then
   if [ x"$2" == x"in" ]; then
    ${fwcmd} add ${IPFW_allow} $1 from any ${ports} to any
   fi
   if [ x"$2" == x"out" ]; then
    ${fwcmd} add ${IPFW_allow} $1 from any to any ${ports}
   fi
  fi
 done
}


# block_protocol <ipv6/ipv4> <in/outreply> <port_list> <TCP/UDP/ALL> <loging> <ip> <allow/deny/nodeny/denyonly>
block_protocol (){
 local xudp=""
 local xtcp=""
 local xdeny="1"
 local xallow="${IPFW_allow}"
 local k=""
 local ks=""
 local any="any"
 local nany="any"
 local xportlist=""
 if [ "$1" = "ipv6" ]; then
  local localtable="table(LOCAL_RANGES6)"
  local outtable="table(OUT_RANGES6)"
 else
  local localtable="table(LOCAL_RANGES)"
  local outtable="table(OUT_RANGES)"
 fi
 if [ -n "$3" ]; then
  xportlist="${3}"
 fi
 if [ x"$5" == x"1" ]; then
  xallow="${IPFW_allowlog}"
 fi
 if [ x"$4" == x"TCP" ]; then
  xtcp="1"
 fi
 if [ x"$4" == x"UDP" ]; then
  xudp="1"
 fi
 if [ x"$4" == x"ALL" ]; then
  xtcp="1"
  xudp="1"
 fi
 if [ x"$2" == x"in" ] || [ x"$2" == x"outreply" ]; then
  if [ x"$6" != x"any" ]; then
   if [ x"$6" == x"NONE" ]; then
    xportlist=""
   fi
   any="table(${6})"
   nany="not table(${6})"
  fi
 fi
 if [ x"$7" == x"deny" ] || [ x"$7" == x"denyonly" ]; then
  xtcp=""
  xudp=""
 fi
 if [ x"$7" == x"nodeny" ]; then
  if [ x"${nany}" != x"any" ]; then
   xdeny=""
  fi
 fi
 if [ x"${nany}" == x"any" ] && [ x"$7" == x"denyonly" ]; then
  xdeny=""
 fi
 if [ x"${IPFW_statefull}" == x"1" ]; then
  k="${IPFW_keep}"
  ks="${IPFW_keepsetup}"
 fi
 for xport in ${xportlist}; do
  if [ x"${xtcp}" == x"1" ]; then
   if [ x"$2" == x"in" ]; then
    ${fwcmd} add ${xallow} tcp from ${any} ${IPFW_unprivports} to ${outtable} ${xport} ${ks}
   fi
   if [ x"$2" == x"outreply" ]; then
    ${fwcmd} add ${xallow} tcp from ${outtable} ${xport} to ${any} ${IPFW_unprivports} ${ks}
   fi
  fi
  if [ x"${xudp}" == x"1" ]; then
   if [ x"$2" == x"in" ]; then
    ${fwcmd} add ${xallow} udp from ${any} ${IPFW_unprivports} to ${outtable} ${xport} ${k}
   fi
   if [ x"$2" == x"outreply" ]; then
    ${fwcmd} add ${xallow} udp from ${outtable} ${xport} to ${any} ${IPFW_unprivports} ${k}
   fi
  fi
  if [ x"${xdeny}" == x"1" ]; then
   if [ x"$2" == x"in" ]; then
    ${fwcmd} add ${IPFW_denylog} $1 from ${nany} to ${outtable} ${xport}
   fi
   if [ x"$2" == x"outreply" ]; then
    ${fwcmd} add ${IPFW_denylog} $1 from ${outtable} ${xport} to ${nany}
   fi
  fi
 done
}


# define_multiwan <type> <port/host> <preferred_wan>
# type = "port","srchost","dsthost"
define_multiwan (){
 local wan=""
 local cmd1=""
 local cmd2=""
 local i=""
 local j=""
 local k=""
 local l=""

 case $1 in
 port)
        cmd1="all from"
        wan="any"
        cmd2="to any $2"
 ;;
 protocol)
        cmd1="$2 from"
        wan="any"
        cmd2="to any"
 ;;
 srchost)
        cmd1="all from"
        wan="table(${2})"
        cmd2="to any"
 ;;
 dsthost)
        cmd1="all from"
        wan="any"
        cmd2="to table(${2})"
 ;;
 *)
        echo "Unknown define_multiwan type."
 ;;
 esac
 if [ -n "${cmd1}" ]; then
  k="IPFW_ofib${3}"
  eval k="\$${k}"
  if [ -n "${k}" ]; then
   ${fwcmd} add set 0 setfib ${k} ${cmd1} ${wan} ${cmd2}
  else
   k="IPFW_ofib${IPFW_WANS}"
   eval k="\$${k}"
   if [ -n "${k}" ]; then
    ${fwcmd} add set 0 setfib ${k} ${cmd1} ${wan} ${cmd2}
   fi
  fi
  for i in ${IPFW_WANS_list}; do
   j="IPFW_oip${i}"
   eval j="\$${j}"
   if [ -n "${j}" ]; then
    k="IPFW_ofib${i}"
    eval k="\$${k}"
    if [ x"${i}" == x"${IPFW_WANS}" ]; then
     l="IPFW_ofib1"
     eval l="\$${l}"
     next="${l}"
    else
     l=$(( ${i} + 1 ))
     l="IPFW_ofib${l}"
     eval l="\$${l}"
     next="${l}"
    fi
    if [ x"${next}" == x"" ]; then
     next=0
    fi
    ${fwcmd} add set ${i} setfib ${next} ${cmd1} ${wan} ${cmd2} fib ${k}  # WAN if down
   fi
  done
 fi
}


# prepare_shaping   ### no params ###
prepare_shaping (){
 ${fwcmd} pipe 10 config bw 1000kbps     # inbound
# ${fwcmd} pipe 11 config bw 1000kbps     # outbound
# ${fwcmd} pipe 20 config bw 5000kbps
# ${fwcmd} pipe 21 config bw 5000kbps
# ${fwcmd} pipe 30 config bw 10000kbps
# ${fwcmd} pipe 31 config bw 10000kbps
# ${fwcmd} pipe 40 config bw 20000kbps
# ${fwcmd} pipe 41 config bw 20000kbps
# ${fwcmd} pipe 50 config bw 100Mbps
# ${fwcmd} pipe 51 config bw 100Mbps
# ${fwcmd} pipe 60 config bw 1000Mbps
# ${fwcmd} pipe 61 config bw 1000Mbps
}


# prepare_tables   ### no params ###
prepare_tables (){
 ${fwcmd} -q table BLACKLIST create > /dev/null 2> /dev/null
 ${fwcmd} -q table BLACKLIST flush > /dev/null 2> /dev/null
 touch /etc/rc.firewall.blacklist
 tail -n +2 /etc/rc.firewall.blacklist | xargs ipfw -q table BLACKLIST add

 ${fwcmd} -q table BLACKLIST6 create > /dev/null 2> /dev/null
 ${fwcmd} -q table BLACKLIST6 flush > /dev/null 2> /dev/null
 touch /etc/rc.firewall.blacklist6
 tail -n +2 /etc/rc.firewall.blacklist6 | xargs ipfw -q table BLACKLIST6 add

 ${fwcmd} -q table BLACKLIST_RMT create > /dev/null 2> /dev/null
 ${fwcmd} -q table BLACKLIST_RMT flush > /dev/null 2> /dev/null
 touch /etc/rc.firewall.blacklist_rmt
 tail -n +2 /etc/rc.firewall.blacklist_rmt | xargs ipfw -q table BLACKLIST_RMT add

 ${fwcmd} -q table BLACKLIST_RMT6 create > /dev/null 2> /dev/null
 ${fwcmd} -q table BLACKLIST_RMT6 flush > /dev/null 2> /dev/null
 touch /etc/rc.firewall.blacklist_rmt6
 tail -n +2 /etc/rc.firewall.blacklist_rmt6 | xargs ipfw -q table BLACKLIST_RMT6 add

 ${fwcmd} -q table BLACKLIST_IMP create > /dev/null 2> /dev/null
 ${fwcmd} -q table BLACKLIST_IMP flush > /dev/null 2> /dev/null
 touch /etc/rc.firewall.blacklist_imp
 tail -n +2 /etc/rc.firewall.blacklist_imp | xargs ipfw -q table BLACKLIST_IMP add

 ${fwcmd} -q table BLACKLIST_IMP6 create > /dev/null 2> /dev/null
 ${fwcmd} -q table BLACKLIST_IMP6 flush > /dev/null 2> /dev/null
 touch /etc/rc.firewall.blacklist_imp6
 tail -n +2 /etc/rc.firewall.blacklist_imp6 | xargs ipfw -q table BLACKLIST_IMP6 add
}


# array_length "${array}"
# (a b c d e f g) -> 7
array_length() {
 local output
 output=`echo "$1" | wc -w`
 output=$(( ${output} + 0 ))
 echo "${output}"
}


# array_get "${array}" "${index}"
# (a b c d e f g) -> c
array_get() {
 local output=""
 local i=0
 local ix=0
 for ix in $1; do
  if [ x"$2" = x"${i}" ]; then
   output=${ix}
  fi
  i=$(( ${i} + 1 ))
 done
 output=$(echo "${output}" | sed "s/_/ /g")
 echo "${output}"
}


# array_groupby "${array}" "<max. number of fields on line>"
# (a b c d e f g) -> (a,b,c) (d,e,f) (g)
array_groupby() {
 local output=""
 local i=0
 local part=""
 local port=""
 local max=$2
 max=$(( ${max} - 1 ))
 for port in $1; do
  part="${part},${port}"
  if [ x"${i}" == x"${max}" ]; then
   o=$(echo "${part}" | cut -c 2- )
   output="${output} ${o}"
   part=""
   i=0
  fi
  i=$(( ${i} + 1 ))
 done
 if [ -n "${part}" ]; then
  o=$(echo "${part}" | cut -c 2- )
  output="${output} ${o}"
 fi
 echo "${output}"
}

